<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" width="955" height="600" xmlns:local="*"
			   creationComplete="application1_creationCompleteHandler(event)" xmlns:instruments="instruments.*" xmlns:grid="grid.*">
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import grid.Cell;
			import grid.CellType;
			
			public static const rb:Roundabout = new Roundabout();			

			protected function updateDimBtn_clickHandler(event:MouseEvent):void
			{
				
				//squareGrid = new SquareGrid();
				//squareGrid.init(parseInt(gridWidth.text), parseInt(gridHeight.text));
				
				//scroller.viewport = squareGrid;
				
			}
//			
			protected function application1_creationCompleteHandler(event:FlexEvent):void
			{
				squareGrid.init(10,10);
				gridWidth.text = "25";
				gridHeight.text = "25";
				
				//changeInstrument(SELECT);
				
			}
	
			protected function onCellSelected(event:Event):void
			{
				//trace('cell selected'+);
				setSelectedCell(squareGrid.selectedCell);
			}
			private function setSelectedCell(c:grid.Cell):void{
				entryCB.enabled = false;
				entryCB.selected = false;
				exitCB.enabled = false;
				exitCB.selected = false;
				if(!c){
					click_cell_lbl.visible = click_cell_lbl.includeInLayout = true;
					cell_info.visible = cell_info.includeInLayout = false;
					cell_coord.text = "";
				}else{
					click_cell_lbl.visible = click_cell_lbl.includeInLayout = false;
					cell_info.visible = cell_info.includeInLayout = true;
					cell_coord.text = c.toString();
					cell_type.text = c.type;
					if(c.isRoad){
						entryCB.enabled = true;
						exitCB.enabled = true;
						updateEntryExitCheckBoxes(squareGrid.selectedCell, entryCB, exitCB);
					}
				}
			}
//			
			protected function onSaveClick(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var MyFile:FileReference = new FileReference();
				MyFile.save("abc", "data.map");
			}
//			
			protected function onChangeInstrument(event:Event):void
			{
				trace('instrument change in model');
				squareGrid.instrument = instrPane.currentInstrumentId;
				//testCell.temp = !testCell.temp;
				//squareGrid.setStyle("side", 25);
			}
			
			protected function onCheckBoxChange(event:Event):void
			{
				if(event.target == entryCB){
					squareGrid.selectedCell.isEntry = entryCB.selected;
				}else if(event.target == exitCB){
					squareGrid.selectedCell.isExit = exitCB.selected;
				}
				updateEntryExitCheckBoxes(squareGrid.selectedCell, entryCB, exitCB);
			}
			private static function updateEntryExitCheckBoxes(cell:Cell, entryCB:CheckBox, exitCB:CheckBox):void{
				trace('update check boxes');
				entryCB.selected = cell.isEntry;
				exitCB.selected = cell.isExit;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:HGroup paddingTop="10" paddingLeft="10">
		<s:Scroller id="scroller" width="501" height="551">
			<!--<local:SquareGrid id="squareGrid" cellSelected="onCellSelected(event)"/>-->
			<grid:SquareGrid id="squareGrid" cellSide="25" cellSelected="onCellSelected(event)"/>
		</s:Scroller>
		
		<s:VGroup>
			<s:HGroup verticalAlign="middle">
				<s:Label text="Width:"/>
				<s:TextInput id="gridWidth" width="50" />
				<s:Label text="Height:"/>
				<s:TextInput id="gridHeight" width="50" />
				<s:Button label="Update" id="updateDimBtn" click="updateDimBtn_clickHandler(event)" />
			</s:HGroup>
			<s:Button label="Save as..." click="onSaveClick(event)"/>
			
			<instruments:InstrumentsPane id="instrPane" changeInstrument="onChangeInstrument(event)" />
			
			<s:VGroup paddingTop="50">
				<s:Label text="Cell properties" fontSize="18"/>
				<s:Label visible="true" id="click_cell_lbl" text="Click on a cell to view info" fontStyle="italic"/>
				<s:VGroup id="cell_info" visible="false" includeInLayout="false">
					<s:HGroup>
						<s:Label text="Cell at" width="50"/>
						<s:Label id="cell_coord"/>
					</s:HGroup>
					<s:HGroup>
						<s:Label text="Type:" width="50"/>
						<s:Label id="cell_type"/>
					</s:HGroup>
					<s:HGroup id="checkBoxes">
						<s:CheckBox id="entryCB" label="Entry" change="onCheckBoxChange(event)" />
						<s:CheckBox id="exitCB" label="Exit" change="onCheckBoxChange(event)" />
					</s:HGroup>
				</s:VGroup>
			</s:VGroup>
			
<!--			<grid:Cell id="testCell" type="{grid.CellType.ROUNDABOUT}" temp="true" />
-->			
		</s:VGroup>
		
		
	</s:HGroup>
	
</s:Application>
